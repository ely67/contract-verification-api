const express = require("express"); const cors = require("cors"); const app = express(); const PORT = process.env.PORT || 3001; app.use(cors()); app.use(express.json()); app.get("/", (req, res) => { res.json({ message: "Contract Verification Dashboard API", version: "1.0.0", status: "running", endpoints: { chains: "/api/verification/chains", verify: "/api/verification/verify", health: "/health" } }); }); app.get("/health", (req, res) => { res.json({ status: "healthy", timestamp: new Date(), uptime: process.uptime() }); }); app.get("/api/verification/chains", (req, res) => { const chains = [{ chainId: 1, name: "Ethereum Mainnet", explorer: "etherscan.io" }, { chainId: 11155111, name: "Ethereum Sepolia", explorer: "sepolia.etherscan.io" }, { chainId: 137, name: "Polygon Mainnet", explorer: "polygonscan.com" }, { chainId: 80001, name: "Polygon Mumbai", explorer: "mumbai.polygonscan.com" }]; res.json({ success: true, data: chains, timestamp: new Date() }); }); app.post("/api/verification/verify", (req, res) => { const { address, chainId } = req.body; if (!address || !chainId) { return res.status(400).json({ success: false, error: "Address and chainId are required", timestamp: new Date() }); } if (!address.startsWith("0x") || address.length !== 42) { return res.status(400).json({ success: false, error: "Invalid address format", timestamp: new Date() }); } res.json({ success: true, data: { status: "verified", address: address, chainId: chainId, contractMetadata: { name: "Sample Contract", compiler: "v0.8.19", optimization: true }, verificationDetails: { isSourceCodeAvailable: true, isBytecodeMatching: true, verificationSource: chainId === 1 ? "etherscan" : "polygonscan" }, securityChecks: { hasProxyPattern: false, hasUpgradeablePattern: false, hasOwnershipControls: true } }, timestamp: new Date() }); }); app.listen(PORT, () => { console.log(`ðŸš€ Contract Verification API running on port ${PORT}`); }); module.exports = app;
